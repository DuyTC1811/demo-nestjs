name: Node.js CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build-and-push-docker:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [22.x]

    # Bước 1: Clone mã nguồn
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    # # Bước 2: Thiết lập môi trường Node.js
    # - name: Setup Node.js ${{ matrix.node-version }}
    #   uses: actions/setup-node@v4
    #   with:
    #     node-version: ${{ matrix.node-version }}

    # # Bước 3: Cache thư viện Node.js
    # - name: Cache Node.js modules
    #   uses: actions/cache@v3
    #   with:
    #     path: ~/.npm
    #     key: ${{ runner.os }}-node-${{ matrix.node-version }}-${{ hashFiles('**/package-lock.json') }}
    #     restore-keys: |
    #       ${{ runner.os }}-node-${{ matrix.node-version }}-

    # # Bước 4: Cài đặt dependencies
    # - name: Install dependencies
    #   run: npm ci

    # # Bước 5: Build ứng dụng
    # - name: Build application
    #   run: npm run build --if-presen

    # # Bước 6: Đăng nhập vào Docker Hub
    # - name: Log in to Docker Hub
    #   uses: docker/login-action@v2
    #   with:
    #     username: ${{ secrets.DOCKER_USERNAME }}
    #     password: ${{ secrets.DOCKER_PASSWORD }}

    # # Bước 7: Cache Docker layers
    # - name: Cache Docker layers
    #   uses: actions/cache@v3
    #   with:
    #     path: /tmp/.buildx-cache
    #     key: ${{ runner.os }}-docker-${{ hashFiles('Dockerfile', '**/*.dockerignore') }}
    #     restore-keys: |
    #       ${{ runner.os }}-docker-

    # # Bước 8: Build và push Docker image lên Docker Hub
    # - name: Build and push Docker image
    #   run: |
    #     docker buildx create --use
    #     docker buildx build \
    #       --cache-from=type=local,src=/tmp/.buildx-cache \
    #       --cache-to=type=local,dest=/tmp/.buildx-cache,mode=max \
    #       -f Dockerfile -t ${{ secrets.DOCKER_USERNAME }}/demo1:latest --push .

    # Bước 9: Gửi thông báo Telegram
    - name: Notify Telegram
      uses: appleboy/telegram-action@master
      if: always() # Chỉ chạy khi job thất bại
      with:
        chat: ${{ secrets.TELEGRAM_CHAT_ID }} # User ID hoặc tên kênh
        token: ${{ secrets.TELEGRAM_TOKEN }}  # Token của bot Telegram
        message: |
          ❌ Build failed!
          Pull Request by: ${{ github.event.pull_request.user.login }}
          Title: ${{ github.event.pull_request.title }}
          Description: ${{ github.event.pull_request.body }}
          Please check the logs for more details.


  # # Bước 10: Deploy ứng dụng lên server thông qua SSH
  # deployment:
  #   runs-on: ubuntu-latest
  #   needs: build-and-push-docker
  #   name: Deploy to Server
  #   steps:
  #     - uses: actions/checkout@v3
  #     - name: Execute SSH commmands on remote server
  #       run: |
  #         echo "${{ secrets.SSH_PRIVATE_KEY }}" > keypair.pem && chmod 600 keypair.pem
  #         ssh -o StrictHostKeyChecking=no -i keypair.pem ${{ secrets.SSH_HOST }} '
  #         docker compose -f docketes.yml pull &&
  #         docker compose -f docketes.yml up -d --remove-orphans'
